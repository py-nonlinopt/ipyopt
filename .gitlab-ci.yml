image: "${CI_REGISTRY_IMAGE}/manylinux2014_x86_64-ipopt:$CI_COMMIT_REF_SLUG"

stages:
  - build-image
  - build
  - test
  - deploy

build-image:
  stage: build-image
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint:
      - ""
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - mkdir -p /kaniko/.docker
    - >
      printf \
        '{"auths": {"%s": {"username": "%s", "password": "%s"}}}' \
        "$CI_REGISTRY" \
        "$CI_REGISTRY_USER" \
        "$CI_REGISTRY_PASSWORD" \
      > /kaniko/.docker/config.json
    - >
      /kaniko/executor \
        --context=.ci \
        --destination "$CI_REGISTRY_IMAGE/manylinux2014_x86_64-ipopt:$CI_COMMIT_REF_SLUG" \
        --cache=true \
        --cache-ttl=720h

build-sdist:
  image: python:slim
  stage: build
  script:
    - sed -i -e "s/version=__version__,/version=\"${CI_COMMIT_TAG}\",/" setup.py
    - pip install numpy # Required in setup.py
    - python setup.py sdist
  artifacts:
    name: sdist
    paths:
      - dist/ipyopt-*.tar.gz

build-wheel:
  stage: build
  script:
    - sed -i -e "s/version=__version__,/version=\"${CI_COMMIT_TAG}\",/" setup.py
    - >
      for py in /opt/python/cp3* ; do \
        "$py"/bin/pip wheel . -w dist ; \
      done
    - >
      for wheel in dist/ipyopt-*.whl ; do \
        auditwheel repair "$wheel" -w dist ; \
      done
  artifacts:
    name: wheel
    paths:
      - dist/ipyopt-*manylinux*.whl

.install-wheel:
  before_script:
    - mkdir /tmp/ipyopt
    - pip install --no-index --find-links dist --target /tmp/ipyopt/ --no-deps ipyopt
    - pip install --no-index --find-links dist --no-deps ipyopt
    - mv /tmp/ipyopt/ipyopt.libs .
    - mv /tmp/ipyopt/ipyopt/ipyopt*.so ipyopt/

pylint:
  stage: test
  image: python:slim
  extends: .install-wheel
  script:
    - apt-get update && apt-get install -y g++
    - pip install numpy scipy cython sympy
    - python setup_test.py build_ext --inplace
    - cythonize -3 -i examples/hs071_capsules.pyx
    - pip install pylint
    - pylint --rcfile=pyproject.toml ipyopt/ test/
    - pylint --rcfile=pyproject.toml --disable=duplicate-code --extension-pkg-whitelist=hs071_capsules examples/

black:
  stage: test
  image: python:slim
  before_script:
    - pip install black
  script:
    - black --check .

mypy:
  stage: test
  image: python:slim
  before_script:
    - pip install mypy numpy
  script:
    - mypy .

test-examples:
  stage: test
  before_script:
    - /opt/python/cp38-cp38/bin/pip install scipy cython sympy .
  script:
    - for script in examples/*.py ; do /opt/python/cp38-cp38/bin/python "$script" || exit 1 ; done

test:
  stage: test
  before_script:
    # Install built wheels:
    - >
      for py in /opt/python/cp3* ; do \
        [ "$py" == /opt/python/cp311-cp311 ] && continue ; \
        "$py"/bin/pip install numpy scipy \
        && "$py"/bin/pip install --only-binary ipyopt --no-index --find-links dist ipyopt ; \
      done
    # Delete ipopt folder to remove it from the PYTHON_PATH:
    - rm -rf ipyopt
  script:
    - >
      for py in /opt/python/cp3* ; do \
        [ "$py" == /opt/python/cp311-cp311 ] && continue ; \
        # Test without capsules:
        "$py"/bin/python -m unittest || exit 1 ; \
        "$py"/bin/python setup_test.py build_ext --inplace ; \
        # Test with capsules:
        "$py"/bin/python -m unittest || exit 1  ; \
      done

pypi:
  stage: deploy
  image: python:slim
  variables:
    TWINE_USERNAME: $PYPI_USERNAME
    TWINE_PASSWORD: $PYPI_PASSWORD
  before_script:
    - pip install twine
  script:
    - twine upload --repository-url $PYPI_REPOSITORY_URL dist/*
  only:
    - tags

pages:
  stage: deploy
  image: python:slim
  extends: .install-wheel
  script:
    - pip install numpy scipy cython sympy sphinx sphinx_rtd_theme
    - sphinx-build -M html docs build
    - mv build/html public
  artifacts:
    paths:
      - public
  only:
    - master
